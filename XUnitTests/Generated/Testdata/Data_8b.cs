// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Testdata
{

    using global::System;
    using global::FlatBuffers;

    public struct Data_8b : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static Data_8b GetRootAsData_8b(ByteBuffer _bb) { return GetRootAsData_8b(_bb, new Data_8b()); }
        public static Data_8b GetRootAsData_8b(ByteBuffer _bb, Data_8b obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
        public Data_8b __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public int Val1 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)150; } }
        public bool MutateVal1(int val1) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, val1); return true; } else { return false; } }
        public int Val2 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)250; } }
        public bool MutateVal2(int val2) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, val2); return true; } else { return false; } }

        public static Offset<Data_8b> CreateData_8b(FlatBufferBuilder builder,
            int val1 = 150,
            int val2 = 250)
        {
            builder.StartObject(2);
            Data_8b.AddVal2(builder, val2);
            Data_8b.AddVal1(builder, val1);
            return Data_8b.EndData_8b(builder);
        }

        public static void StartData_8b(FlatBufferBuilder builder) { builder.StartObject(2); }
        public static void AddVal1(FlatBufferBuilder builder, int val1) { builder.AddInt(0, val1, 150); }
        public static void AddVal2(FlatBufferBuilder builder, int val2) { builder.AddInt(1, val2, 250); }
        public static Offset<Data_8b> EndData_8b(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<Data_8b>(o);
        }
    };


}
