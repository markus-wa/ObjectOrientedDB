using System;
using ObjectOrientedDB.FileStorage;

namespace ObjectOrientedDB
{
    /// <summary>
    /// ObjectDB represents a database instance.
    /// </summary>
    /// <typeparam name="TGroup">
    /// Type of objects this database can store.
    /// Can be an interface.
    /// </typeparam>
    public class ObjectDB<TGroup> : IDisposable
    {
        /// <summary>
        /// GUID generator.
        /// </summary>
        /// <returns>A new GUID</returns>
        public delegate Guid GuidProvider();

        private readonly StorageEngine storageEngine;
        private readonly Serializer<TGroup> serializer;
        private readonly GuidProvider guidProvider;

        public ObjectDB(StorageEngine storageEngine, Serializer<TGroup> serializer, GuidProvider guidProvider = null)
        {
            this.storageEngine = storageEngine;
            this.serializer = serializer;
            this.guidProvider = guidProvider ?? (() => Guid.NewGuid());
        }

        /// <summary>
        /// Serializes and inserts an object into the database.
        /// </summary>
        /// <param name="obj">The object to store</param>
        /// <returns>A GUID generated by the GuidProvider</returns>
        public Guid Insert(TGroup obj)
        {
            var guid = guidProvider();
            var data = serializer.Serialize(obj);
            storageEngine.Insert(guid, data);
            return guid;
        }

        /// <summary>
        /// Reads and deserializes an object from the database.
        /// </summary>
        /// <typeparam name="T">The type of the object to be deserialized</typeparam>
        /// <param name="guid">The identifier for the object to read</param>
        /// <returns>The deserialized object</returns>
        /// <exception>RecordNotFoundException if no data was found for the provided GUID</exception>
        public T Read<T>(Guid guid) where T : TGroup
        {
            var data = storageEngine.Read(guid);
            var obj = serializer.Deserialize<T>(data);
            return obj;
        }

        /// <summary>
        /// Updates an existing object in the database.
        /// </summary>
        /// <param name="guid">The GUID of the object to update</param>
        /// <param name="updated">New object instance which will replace the existing one</param>
        public void Update(Guid guid, TGroup updated)
        {
            var data = serializer.Serialize(updated);
            storageEngine.Update(guid, data);
        }

        /// <summary>
        /// Deletes an existing object from the database.
        /// </summary>
        /// <param name="guid">The GUID of the object to delete</param>
        public void Delete(Guid guid)
        {
            storageEngine.Delete(guid);
        }

        public void Dispose()
        {
            if (storageEngine is IDisposable)
                ((IDisposable)storageEngine).Dispose();
        }
    }
}